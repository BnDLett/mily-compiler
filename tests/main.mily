/---------------------- FEATURE DEMO ---------------------

/*
Variables and functions declared below here are supposed to be
in the standard library (bulb.mily)
but the library import feature (#include) has not been implemented yet (too eepy rn)
*/
/- start placeholders
void print() {}
/- end placeholders
/*
/---------- Variable Declarations ----------
let num = 20;
int x = 6;
double y = 43.4;

/---------- Variable Assignments ----------
num = 30;
x = 10;
y = 40;

/---------- Explicit Casting (Primitive) ----------
int test2 = (int) 5.3;
int test = (int) (30 / 4);

/---------- Inline Statements ----------
num = 30; x = 10; y = 40;

/---------- Functions ----------
int f(int f_x) {
    return f_x;
}

int f2(int f_x, int f_y) {
    return (int) (f_x + f_y);
}

/---------- For Loops ----------
for (int i = 0; i < 100; i = i + 1) {
    print(i);
}

/---------- While Loops ----------
int while_var = 0;
while (true) {
    print(while_var);
    while_var = while_var + 1;
}

/---------- If Statements ----------
if (true) {
    x = 5;
}

if (f2(4, 2) > 100 + x * y) {
    x = 1;
}
/------ Else If
else if (true) {
    y = 5;
}
/------ Else
else {
    y = 10; x = 90;
}

/---------- Complex Expressions ----------
boolean complex_function(int h, int j) {
    return (1 - ((h + j) * 4) + 1) == 1 + j && (h + j > 10);
}
let complex = (-(((60 + (1 + -3 + 2 + -5 - 3) // -6 / -30 * (92 + 20) - -100 ** -2 / 3)) - 10)) + 289;
/- simplifies to 242.73333333333335 double on compilation

let complex_cast_int = (int) (-(((60 + (1 + -3 + 2 + -5 - 3) // -6 / -30 * (92 + 20) - -100 ** -2 / 3)) - 10)) + 289;
/- simplifies to 243 int on compilation

/-------------------- Semantic Errors (uncomment them to see)  --------------------
/*
/---------- Undeclared Variable
amongus = 100;                     /- MilySemanticError: Semantic error on line: 80, token: "amongus": Variable "amongus" is undeclared

/---------- Wrong Type Declaration
int value = false;                 /- MilySemanticError: Semantic error on line: 83, token: "value": Cannot cast "boolean" into "int"

/---------- Wrong Type Assignment
boolean check = true;
check = 10.4;                      /- MilySemanticError: Semantic error on line: 87, token: "check": Cannot cast "double" into "boolean"

/---------- Wrong Type in Operation
let wrong_op =  false * (7 * 9);   /- MilySemanticError: Semantic error on line: 90, token: "op_wrong_op": Operator * cannot be applied to boolean and int

/---------- Redeclaration
let red = 10;
boolean red = false;               /- MilySemanticError: Semantic error on line: 94, token: "red": Variable "red" is already declared within scope

/---------- Illegal Implicit Casting
int amogus3 = 5 / 2;               /- MilySemanticError: Semantic error on line: 97, token: "amogus3": Cannot cast "double" into "int"

/---- The right way for this is to use integer division //
int amogus4 = 5 // 2;

/---- Or use an explicit cast
int amogus5 = (int) (5 / 2);


/---------- Illegal Functions
/---- Wrong return type
int wrong_type() {           /- MilySemanticError: Semantic error on line: 108, token: "branching_test_return": Invalid return type boolean
    return false;
}

/---- Return value required
int value_req() {            /- MilySemanticError: Semantic error on line: 113, token: "value_req": Not all paths return a value
    int test_ = 10;
}

/---- Missing returns in branching
int branch_error(int x_) {   /- MilySemanticError: Semantic error on line: 118, token: "branch_error": Not all paths return a value
    if (x_ > 10) {
        return 1;
    }
}

/---- Illegal conditionals
/- They must be booleans
if (10) {}                   /- MilySemanticError: Semantic error on line: 126, token: "if": Expression in conditional must result in value of type boolean, is instead of type int

while(10) {}                 /- MilySemanticError: Semantic error on line: 128, token: "while": Expression in conditional must result in a value of type boolean, is instead of type int
*/
/*
int var0 = 1;
int var10 = 1020031201;
if (var10 < var0) {
    int var1 = 10; int var2 = 3;
    int var3 = var1 + var2;
    int var4 =
        ((var1 + 100) * var2 + var1 + 100 + var2 + 100 // var2 + var1 ** var2)
        + 700000 - 1000 * 200 // var2  * var3
        + var1 // var3 ** var2;
    int var5 = (10 + 100) * 1 + 10 + 100 + 1 + var4;
    var5 = var5 * 2;
}
int var1 = 10; int var2 = 3;
int var3 = var1 + var2;
*/

if (true) {
    int test = 1;
} else if (true) {
    int test = 2;
} else {
    int test = 3;
}
if (false) {
    int test = 4;
} else {
    int test = 5;
}
if (true) {
    if (true) {
        int test = 6;

        if (test < 10) {
            test = 10;
        }
    }
}